package ServerClient;
import java.net.*;
import java.io.*;

// Server will run on port 5180 for UDP and 5380 for TCP

public class Server {
	private DatagramSocket socketUDP; // UDP Socket for "Welcoming Server"
	private static int udpPort = 5180;
	private boolean running; // Boolean for looping connection
	private byte[] buf = new byte[256]; // Size of byte buffer
	
	// Server constructor
	// UDP Socket on (5180)
	public Server() {
		try {
			socketUDP = new DatagramSocket(udpPort);
		} catch (SocketException e) {
			e.printStackTrace();
		}
	}
	
	public void run() {
		// Leave UDP connection on to receive connection requests.
		// Acts as "Welcoming Server"
		running = true;
		while (running) {
			// Create packet for receiveing data
			DatagramPacket packet = new DatagramPacket(buf, buf.length);
			
			// Try to 'transfer' packet to socket for extraction
			try {
				socketUDP.receive(packet);
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			// Extract information from datagram
			InetAddress address = packet.getAddress();
			int port = packet.getPort();
			// Sends packet back to  client
			// Will replace with sending CHALLENGE
			packet = new DatagramPacket(buf, buf.length, address, port);
			
			// Evaluate response
			String received = new String(packet.getData(), 0, packet.getLength());
			
			
			// Depending on response received, we choose one of the following functions to run through.
			// TODO: Fill in all the important functions, followed by 
			// chat related functions.
			// FIXME: Want to check if the switch-case may work instead.
			if (received.equals("end")) {
				running = false;
				continue;
			}
//			switch(received) {
//			case "HELLO":
//				// Function
//				break;
//			case "end":
//				// Close connections
//				close();
//				break;
//			default:
//				break;
//			}
			
			// FIXME: For testing
			System.out.println(received);
			try {
				socketUDP.send(packet);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		close();
	}
	
	// Close UDP socket, block incoming chat requests
	private void close() {
		socketUDP.close();
	}
	
	
	/*IMPORTANT FUNCTIONS*/
	public boolean CHALLENGE(int rand) {
		// TODO: Sent by server to challenge client to authenticate self. New rand generated every challenge.
		return true; // FIXME: Need to return proper value, or return earlier.
	}
	
	public void AUTH_SUCCESS(int rand_cookie, int port_number) {
		// TODO: Sent by server to notify the client authentication was successful. rand_cookie is rand generated by server, por_number is TCP port assigned by server for subsequent connection by client.
	}
	
	public void AUTH_FAIL() {
		// TODO: Sent by server to notify the client authentication has failed.
	}
	
	public void CONNECTED() {
		// TODO: Sent by the server to notify the client it has been connected.
	}
	
	/*Everything Else*/
	
}
