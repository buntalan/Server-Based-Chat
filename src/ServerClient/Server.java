package ServerClient;

import java.net.*;
import java.io.*;
import java.util.*;


// Server will run on port 5180 for UDP and 5380 for TCP

public class Server {
	// For keeping list of clients
	// TODO: Make function to fill in list of clients
	// and their respective SubID, SubKey, rand_Cookie from txt file
	// FIXME: Might not need to be static, note it.
	static ArrayList<Client> listClient;
	int[] listRandCookie;
	// Variables required for UDP connection
	private static DatagramSocket socketUDP; // UDP Socket for "Welcoming Server"
	private static int udpPort = 5180;
	private InetAddress address;
	
	// Server constructor
	// UDP Socket on (5180)
	public Server() throws Exception {
	}
	
	/*************************
	 * Main/Driver function  *
	 ************************/
	public static void main (String[] arg) throws Exception {
		socketUDP = new DatagramSocket(udpPort); // Open UDP Socket on port 5180.
		boolean running; // Boolean for looping connection
		
		// Variables for receiving datagrams from UDP
		// TODO: May replace later with StringBuffer?
		byte[] buf = new byte[1024]; // Size of byte buffer
		DatagramPacket received = new DatagramPacket(buf, buf.length); // For receiving packets
		
		// Populate subscriber list
		listClient = fillSubscriberList();
		
		// Will always be running
		running = true;
		
		// ... forever.
		while (running) {
			// Receive packet
			socketUDP.receive(received);
			
			// Extract data
			String clientMessage = new String(received.getData());
			
			if (clientMessage != null) {
				System.out.println(clientMessage);
			}
			
			// TODO: Make client message
			
		}
	}

	
	/*CONNECTION FUNCTIONS*/
	public boolean CHALLENGE(int rand) {
		// TODO: Sent by server to challenge client to authenticate self. New rand generated every challenge.
		return true; // FIXME: Need to return proper value, or return earlier.
	}
	
	public void AUTH_SUCCESS(int rand_cookie, int port_number) {
		// TODO: Sent by server to notify the client authentication was successful. rand_cookie is rand generated by server, por_number is TCP port assigned by server for subsequent connection by client.
	}
	
	public void AUTH_FAIL() {
		// TODO: Sent by server to notify the client authentication has failed.
	}
	
	public void CONNECTED() {
		// TODO: Sent by the server to notify the client it has been connected.
	}
	
	/*CHAT FUNCTIONS*/
	
	
	/*Everything Else*/
	
	// Test subscriber fill
	private static void subscriberFillTest() {
		// Test list of subscribers
		for (int i = 0; i < listClient.size(); i++) {
			System.out.println(listClient.get(i).getClient_ID() + " " + listClient.get(i).getKey());
		}
	}
	
	// Fill subscriber list
	public static ArrayList<Client> fillSubscriberList() throws IOException, Exception {
		ArrayList<Client> clientList;
		clientList = new ArrayList<Client>();
		String temp;
		String[] tokens;
		
		FileInputStream in = null;
		BufferedReader reader = null;
		
		// Open input stream and fill subscriber list
		try {
			// Place "subscribers.txt" in project folder.
			in = new FileInputStream("subscribers.txt"); // Read in from file subscribers.txt
			reader = new BufferedReader(new InputStreamReader(in));
			
			int i = 0;
			temp = reader.readLine();
			while (temp != null) {
				// Instantiate new client to add to ArrayList of Clients
				Client client = new Client();
				
				// Add information about client.
				// FIXME: Finish adding client secret key
				tokens = temp.split("\\W+");
				client.setClient_ID(tokens[0]);
				client.setKey(Integer.parseInt(tokens[1]));
				
				// Add object to list
				clientList.add(client);
				
				// Go on to next line
				temp = reader.readLine();
			}
		}
		finally {
			if (in != null) {
				in.close();
				reader.close();
			}
		}
		
		return clientList;
	}
}
